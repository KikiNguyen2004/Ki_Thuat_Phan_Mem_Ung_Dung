package MVC.Controller.QLPK;

import MVC.Model.QLPK.DoctorManagementModel;
import MVC.View.QLPK.DoctorManagementView;
import MVC.View.QLPK.MainView;

import javax.swing.*;
import java.sql.*;

public class DoctorManagementController {
    private Connection connection;
    private DoctorManagementView view;

    public DoctorManagementController(DoctorManagementView view) throws SQLException, ClassNotFoundException {
        this.view = view;

        // Initialize database connection
        Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
        String url = "jdbc:sqlserver://localhost:1433;databaseName=QuanLyPhongKham;encrypt=true;trustServerCertificate=true";
        String username = "sa";
        String pass = "Phucthan@2004";
        connection = DriverManager.getConnection(url, username, pass);

        loadDoctorIDs();

        view.searchButton.addActionListener(e -> searchDoctor());
        view.addButton.addActionListener(e -> addDoctor());
        view.updateButton.addActionListener(e -> updateDoctor());
        view.deleteButton.addActionListener(e -> deleteDoctor());
    }

    private void loadDoctorIDs() {
        try (Statement stm = connection.createStatement()) {
            ResultSet resultSet = stm.executeQuery("SELECT maBacSi FROM Doctor");
            view.doctorIDBox.removeAllItems();
            while (resultSet.next()) {
                view.doctorIDBox.addItem(resultSet.getString("maBacSi"));
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    private void searchDoctor() {
        String selectedDoctorID = (String) view.doctorIDBox.getSelectedItem();
        if (selectedDoctorID != null) {
            try (PreparedStatement preparedStatement = connection.prepareStatement(
                    "SELECT * FROM Doctor WHERE maBacSi = ?")) {
                preparedStatement.setString(1, selectedDoctorID);
                ResultSet resultSet = preparedStatement.executeQuery();

                if (resultSet.next()) {
                    view.doctorIDField.setText(resultSet.getString("maBacSi"));
                    view.passwordField.setText(resultSet.getString("matKhau"));
                    view.dobField.setText(resultSet.getString("ngaySinh"));
                    view.nameField.setText(resultSet.getString("hoTen"));
                    view.phoneField.setText(resultSet.getString("soDienThoai"));
                    view.emailField.setText(resultSet.getString("email"));
                    view.positionField.setText(resultSet.getString("viTri"));
                    view.salaryField.setText(String.valueOf(resultSet.getInt("luong")));
                    view.permissionIDField.setText(resultSet.getString("maQuyen"));
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(view, "An error occurred while searching for the doctor.");
                ex.printStackTrace();
            }
        }
    }

    private void addDoctor() {
        try (PreparedStatement preparedStatement = connection.prepareStatement(
                "INSERT INTO Doctor (maBacSi, matKhau, ngaySinh, hoTen, soDienThoai, email, viTri, luong, maQuyen) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)")) {
            preparedStatement.setString(1, view.doctorIDField.getText());
            preparedStatement.setString(2, view.passwordField.getText());
            preparedStatement.setString(3, view.dobField.getText());
            preparedStatement.setString(4, view.nameField.getText());
            preparedStatement.setString(5, view.phoneField.getText());
            preparedStatement.setString(6, view.emailField.getText());
            preparedStatement.setString(7, view.positionField.getText());
            preparedStatement.setInt(8, Integer.parseInt(view.salaryField.getText()));
            preparedStatement.setString(9, view.permissionIDField.getText());
            preparedStatement.executeUpdate();

            JOptionPane.showMessageDialog(view, "Doctor added successfully.");
            loadDoctorIDs();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(view, "An error occurred while adding the doctor.");
            ex.printStackTrace();
        }
    }

    private void updateDoctor() {
        try (PreparedStatement preparedStatement = connection.prepareStatement(
                "UPDATE Doctor SET matKhau = ?, ngaySinh = ?, hoTen = ?, soDienThoai = ?, email = ?, viTri = ?, luong = ?, maQuyen = ? WHERE maBacSi = ?")) {
            preparedStatement.setString(1, view.passwordField.getText());
            preparedStatement.setString(2, view.dobField.getText());
            preparedStatement.setString(3, view.nameField.getText());
            preparedStatement.setString(4, view.phoneField.getText());
            preparedStatement.setString(5, view.emailField.getText());
            preparedStatement.setString(6, view.positionField.getText());
            preparedStatement.setInt(7, Integer.parseInt(view.salaryField.getText()));
            preparedStatement.setString(8, view.permissionIDField.getText());
            preparedStatement.setString(9, view.doctorIDField.getText());
            preparedStatement.executeUpdate();

            JOptionPane.showMessageDialog(view, "Doctor updated successfully.");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(view, "An error occurred while updating the doctor.");
            ex.printStackTrace();
        }
    }

    private void deleteDoctor() {
        String selectedDoctorID = (String) view.doctorIDBox.getSelectedItem();
        if (selectedDoctorID != null) {
            try (PreparedStatement preparedStatement = connection.prepareStatement(
                    "DELETE FROM Doctor WHERE maBacSi = ?")) {
                preparedStatement.setString(1, selectedDoctorID);
                preparedStatement.executeUpdate();

                JOptionPane.showMessageDialog(view, "Doctor deleted successfully.");
                loadDoctorIDs();

                // Clear fields after deletion
                view.doctorIDField.setText("");
                view.passwordField.setText("");
                view.dobField.setText("");
                view.nameField.setText("");
                view.phoneField.setText("");
                view.emailField.setText("");
                view.positionField.setText("");
                view.salaryField.setText("");
                view.permissionIDField.setText("");
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(view, "An error occurred while deleting the doctor.");
                ex.printStackTrace();
            }
        } else {
            JOptionPane.showMessageDialog(view, "No doctor selected to delete.");
        }
    }
    
    // Để quay trở lại màn hình main
    view.returnButton.addActionListener(e -> {
        view.dispose(); // Close the Doctor Management View
        MainView mainView = new MainView(); // Reopen the Main View
        new MainController(mainView);
    });

    public static void main(String[] args) {
        try {
            DoctorManagementView view = new DoctorManagementView();
            new DoctorManagementController(view);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
